<?php

/**
 * @file
 * deny_access.module
 *
 * This module overrides create/view/edit/delete content access granted by
 * other modules -- by 'permission' for now.
 *
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_node_access().
 */
function deny_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $type = (is_string($node) ? $node : $node->getType());
  if ($account->hasPermission("DENY accessing $type content") && !$account->hasPermission('bypass node access')) {
    return 'deny';
  }

  switch ($op) {
    case 'create':
      return $permission = AccessResult::allowedIfHasPermission($account, 'DENY creating content');
    case 'view':
      return $permission = AccessResult::allowedIfHasPermission($account, 'DENY accessing content');
    case 'update':
      return $permission = AccessResult::allowedIfHasPermission($account, 'DENY editing content');
    case 'delete':
      return $permission = AccessResult::allowedIfHasPermission($account, 'DENY deleting content');
    default:
      return $permission = AccessResult::neutral();
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_permissions.
 */
function deny_access_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  $current_path = \Drupal::service('path.current')->getPath();
  $form['permission']['bypass node access']['#description'] .= '<br /><em class="permission-warning">' . t("This permission overrides the 'DENY' permissions of the !Deny_Access module.", array('!Deny_Access' => \Drupal::l('Deny Access', $current_path, array('fragment' => 'module-deny_access')))) . '</em>';
}

